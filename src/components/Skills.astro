---
const { t } = Astro.props;
---

<section id="skills">
  <div class="skills-background">
    <span class="skills-text">SKILLS</span>
  </div>
  
  <div class="skills-content">
    <div class="skills-header">
      <h2 class="scramble-text" data-original={t('skills.title')}>{t('skills.title')}</h2>
    </div>
    
    <div class="skills-grid">
      <div class="skill-category">
        <h3 class="scramble-text" data-original={t('skills.development')}>{t('skills.development')}</h3>
        <div class="skill-list">
          <span class="scramble-text" data-original="Next.js">Next.js</span>
          <span>/</span>
          <span class="scramble-text" data-original="React">React</span>
          <span>/</span>
          <span class="scramble-text" data-original="HTML / CSS / Tailwind">HTML / CSS / Tailwind</span>
          <span>/</span>
          <span class="scramble-text" data-original="Python">Python</span>
          <span>/</span>
          <span class="scramble-text" data-original="C#">C#</span>
          <span>/</span>
          <span class="scramble-text" data-original="JavaScript / Bun / Node.js">JavaScript / Bun / Node.js</span>
          <span>/</span>
          <span class="scramble-text" data-original="TypeScript">TypeScript</span>
          <span>/</span>
		  <span class="scramble-text" data-original="Astro">Astro</span>
		  <span>/</span>
          <span class="scramble-text" data-original="SQL / PostgreSQL / MySQL">SQL / PostgreSQL / MySQL</span>
		  <span>/</span>
		  <span class="scramble-text" data-original="MongoDB">MongoDB</span>
          <span>/</span>
          <span class="scramble-text" data-original="Git">Git</span>
          <span>/</span>
          <span class="scramble-text" data-original="Docker">Docker</span>
          <span>/</span>
        </div>
      </div>
      
      <div class="skill-category">
        <h3 class="scramble-text" data-original={t('skills.cms')}>{t('skills.cms')}</h3>
        <div class="skill-list">
          <span class="scramble-text" data-original="WordPress">WordPress</span>
          <span>/</span>
          <span class="scramble-text" data-original="Shopify">Shopify</span>
        </div>
      </div>
      
      <div class="skill-category">
        <h3 class="scramble-text" data-original={t('skills.design')}>{t('skills.design')}</h3>
        <div class="skill-list">
          <span class="scramble-text" data-original="Figma">Figma</span>
          <span>/</span>
          <span class="scramble-text" data-original="Photoshop">Photoshop</span>
          <span>/</span>
          <span class="scramble-text" data-original="Illustrator">Illustrator</span>
        </div>
      </div>
      
      <div class="skill-category">
        <h3 class="scramble-text" data-original={t('skills.admin')}>{t('skills.admin')}</h3>
        <div class="skill-list">
          <span class="scramble-text" data-original="GitHub">GitHub</span>
          <span>/</span>
          <span class="scramble-text" data-original="Trello">Trello</span>
          <span>/</span>
          <span class="scramble-text" data-original="Asana">Asana</span>
          <span>/</span>
          <span class="scramble-text" data-original="Jira">Jira</span>
          <span>/</span>
          <span class="scramble-text" data-original="Acrobat">Acrobat</span>
        </div>
      </div>
    </div>
  </div>
</section>

<script>
  import gsap from "gsap";
  import { ScrambleTextPlugin } from "gsap/ScrambleTextPlugin";
  
  gsap.registerPlugin(ScrambleTextPlugin);
  
  // Scramble animation function
  function createScrambleAnimation(element: HTMLElement, originalText: string) {
    return gsap.to(element, {
      scrambleText: {
        text: originalText,
        chars: "lowerCase",
        speed: 1,
        revealDelay: 0,
        tweenLength: false
      },
      duration: 0.8,
      ease: "none"
    });
  }
  
  // Random scramble function
  function randomScramble(element: HTMLElement, originalText: string) {
    // Random delay between 5-12 seconds for skills elements
    const delay = Math.random() * 7000 + 5000;
    
    setTimeout(() => {
      createScrambleAnimation(element, originalText).then(() => {
        randomScramble(element, originalText); // Schedule next scramble
      });
    }, delay);
  }
  
  // Wait for DOM to be ready
  document.addEventListener('DOMContentLoaded', () => {
    const scrambleElements = document.querySelectorAll('#skills .scramble-text') as NodeListOf<HTMLElement>;
    
    scrambleElements.forEach((element, index) => {
      const originalText = element.getAttribute('data-original') || element.textContent?.trim() || "";
      
      // Initial animation synchronized with all components
      setTimeout(() => {
        createScrambleAnimation(element, originalText).then(() => {
          // Start periodic random scrambling
          randomScramble(element, originalText);
        });
      }, 500); // Same timing as Hero component
    });
  });
</script>

<style>
  #skills {
    position: relative;
    width: 100%;
    min-height: 100vh;
    padding: clamp(2rem, 8vw, 4rem) 0 clamp(1rem, 3vw, 2rem) 0;
    overflow: hidden;
  }

  .skills-background {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: 0;
    opacity: 0.05;
    pointer-events: none;
  }

  .skills-text {
    font-size: clamp(8rem, 25vw, 20rem);
    font-weight: bold;
    color: #fff;
    white-space: nowrap;
    user-select: none;
  }

  .skills-content {
    position: relative;
    z-index: 1;
    width: 100%;
    /* Align with hero layout: image width + gap + content */
    padding-left: calc(250px + clamp(1rem, 4vw, 2rem));
    padding-right: clamp(1rem, 4vw, 2rem);
  }

  .skills-header {
    margin-bottom: clamp(2rem, 6vw, 3rem);
  }

  .skills-header h2 {
    font-size: clamp(1rem, 2.5vw, 1.2rem);
    font-weight: normal;
    color: #fff;
    margin: 0;
    letter-spacing: 0.1em;
    border: 1px solid #333;
    padding: 0.5rem 1rem;
    display: inline-block;
    background-color: rgba(17, 17, 17, 0.8);
  }

  .skills-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: clamp(1.5rem, 4vw, 2.5rem);
    align-items: start;
  }

  .skill-category {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .skill-category h3 {
    font-size: clamp(0.8rem, 2vw, 0.9rem);
    font-weight: normal;
    color: #fff;
    margin: 0 0 1rem 0;
    letter-spacing: 0.1em;
    border-bottom: 1px solid #333;
    padding-bottom: 0.5rem;
  }

  .skill-list {
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    gap: 0.5rem;
    line-height: 1.6;
  }

  .skill-list span {
    font-size: clamp(0.75rem, 1.8vw, 0.85rem);
    color: #ccc;
    font-family: inherit;
  }

  .skill-list span:not(:nth-child(even)) {
    /* Skills (not separators) */
    transition: color 0.3s ease;
  }

  .skill-list span:not(:nth-child(even)):hover {
    color: #fff;
  }

  .skill-list span:nth-child(even) {
    /* Separators */
    color: #666;
    font-weight: normal;
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .skills-content {
      padding-left: clamp(1rem, 4vw, 2rem);
    }
    
    .skills-grid {
      grid-template-columns: 1fr;
      gap: 2rem;
    }
    
    .skills-text {
      font-size: clamp(6rem, 30vw, 12rem);
    }
  }

  @media (max-width: 480px) {
    #skills {
      padding: 2rem 0;
    }
    
    .skills-content {
      padding-left: 1rem;
      padding-right: 1rem;
    }
    
    .skill-list {
      gap: 0.3rem;
    }
  }
</style> 