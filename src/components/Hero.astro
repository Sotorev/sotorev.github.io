---
import me from "../assets/me.png";
import PixelatedImage from "./PixelatedImage.astro";
const { subtitle } = Astro.props;
---

<section id="hero">
  <PixelatedImage
    src={me.src}
    alt="Profile"
    width={250}
    height={250}
    gridSize={20}
  />
  <div class="hero-content">
    <div class="text-scramble__content">
      <h1 id="scramble-text-original" style="display: none;">
        {subtitle}
      </h1>
      
      <div class="text-scramble__text" aria-hidden="true">
        <span id="scramble-text" class="scrambled">{subtitle}</span>
      </div>
    </div>
  </div>
</section>

<script>
  import gsap from "gsap";
  import { ScrambleTextPlugin } from "gsap/ScrambleTextPlugin";
  
  gsap.registerPlugin(ScrambleTextPlugin);
  
  // Scramble animation function
  function createScrambleAnimation(element: HTMLElement, originalText: string) {
    return gsap.to(element, {
      scrambleText: {
        text: originalText,
        chars: "lowerCase",
        speed: 1,
        revealDelay: 0,
        tweenLength: false
      },
      duration: 0.8,
      ease: "none"
    });
  }
  
  // Wait for DOM to be ready
  document.addEventListener('DOMContentLoaded', () => {
    const scrambleElement = document.querySelector("#scramble-text") as HTMLElement;
    const originalElement = document.querySelector("#scramble-text-original") as HTMLElement;
    
    if (!scrambleElement || !originalElement) return;
    
    // Get the actual subtitle text from the original element
    const subtitleText = originalElement.textContent?.trim() || "";
    
    // Initial scramble animation - synchronized with other components
    setTimeout(() => {
      createScrambleAnimation(scrambleElement, subtitleText);
      // No periodic scrambling for hero
    }, 500);
  });
</script>

<style>
  #hero {
    width: 100%;
    display: flex;
    gap: clamp(1rem, 4vw, 2rem);
  }

  .hero-content {
    display: flex;
    flex-direction: column;
    font-weight: lighter;
    text-align: left;
    flex: 1;
    min-width: 0; /* Allow text to shrink */
  }

  .text-scramble__content {
    position: relative;
    font-size: clamp(1.2rem, 4vw, 3.5rem);
    font-weight: lighter;
    line-height: 1.2;
    letter-spacing: -0.01em;
  }

  .hero-content h1 {
    display: none;
    margin: 0;
  }

  .text-scramble__text {
    position: relative;
    display: inline-block;
  }

  .text-scramble__text span.scrambled {
    word-wrap: break-word;
    overflow-wrap: break-word;
    white-space: pre-wrap;
  }

  /* Mobile-first responsive design */
  @media (max-width: 768px) {
    #hero {
      flex-direction: column;
      text-align: left;
      gap: 1.5rem;
    }

    .hero-content {
      text-align: left;
    }

    .text-scramble__content {
      font-size: clamp(1rem, 6vw, 2rem);
      line-height: 1.3;
    }
  }

  @media (max-width: 480px) {
    .text-scramble__content {
      font-size: clamp(0.9rem, 5vw, 1.5rem);
      line-height: 1.4;
    }
  }
</style>
